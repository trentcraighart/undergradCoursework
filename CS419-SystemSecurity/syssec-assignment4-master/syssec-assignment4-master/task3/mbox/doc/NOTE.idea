a usable sandbox for desktop applications by rewriting system calls

safe?
 - to system, isolation: uid/process domain gives us strong abstraction
   (userfs is to find a way to safely allow normal users to use uid protection domain)
 - to user, integrity:
   - process? it is recoverable anyway
   - data? (integrity) seems to be what we want?

sandbox?
 - code: complete control (or constraint resource)
    - browser: html/js, nacl
    - binary rewriting: pin, dynamicRIO, vx86
    - os: process
 - data: protect user's data
    - os: uid separation
    - vm (both code/data)

usable sandbox?

 I bought a new ebook reader. Unfortunately, the reader only supports epub file
 format. To read pdf files, I need to convert a pdf file to epub format. After
 searching the web for a while, I found a binary that an anonymous author
 uploaded to his web site saying 'free but perfect pdf->epub converter'. In
 fact, it is suspicious looking binary without any code and reviews from
 people. But I desperately want to read pdf files in my ebook so I decided to
 give it a try.

 - just run a binary?
   - finger crossed it doesn't destroy my computer
 
 - using vm?
   - copy the downloaded binary, and a pdf file for testing
   - run a binary with the pdf file and check result epub file
   - people feel safe about this approach

 - reverse-engineering?
   - disassemble and check if it is safe to use
   - ideal, but error-prone and annoying

